services:
  app:
    build:
      context: .
      args:
        - GO_DEV_IMAGE=${GO_DEV_IMAGE}
      dockerfile: ./Dockerfile.dev.server
      target: dev
    container_name: MaGRO_app
    working_dir: /workspace/server # devcontainer„Å®Âêà„Çè„Åõ„Çã
    environment:
      GO_APP_PORT: ${GO_APP_PORT}
      DBPORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      ENTRA_CLIENT_ID: ${ENTRA_CLIENT_DEV_ID} # „ÇØ„É©„Ç§„Ç¢„É≥„Éà„Åã„ÇâÈÄÅ„Çâ„Çå„Å¶„Åç„ÅüID„Éà„Éº„ÇØ„É≥„ÅÆÊ§úË®º„Å´ÂøÖË¶Å
      # üë∫ below 2 envs are ONLY temporary sinogi until entra app assign user manager üëπ
      CLIENT_SECRET: ${ENTRA_CLIENT_DEV_SECRET}
      TENANT_ID: ${ENTRA_TENANT_ID}

    tty: true
    volumes:
      - ../..:/workspace:cached
    restart: always
    depends_on:
        db:
          condition: service_healthy
  upserter:
    build:
      context: .
      args:
        - GO_DEV_IMAGE=${GO_DEV_IMAGE}
      dockerfile: ./Dockerfile.upsert
      target: dev
    container_name: MaGRO_upserter
    working_dir: /workspace
    environment:
      DBPORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    tty: true
    volumes:
      - ../../upserter:/workspace:cached
      - ./_tools/upserter/testdata.csv:/files/data.csv
    restart: always
  db:
    image: postgres:latest
    container_name: MaGRO_DB
    restart: unless-stopped
    volumes:
      - magro-db:/var/lib/postgresql/data
      - ./_tools/postgres/init:/docker-entrypoint-initdb.d
    environment:
      TZ: "Asia/Tokyo"
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --no-locale"
      PGPORT: ${DB_PORT}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: pg_isready -U "${POSTGRES_USER:-postgres}" || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    command: postgres -c log_destination=stderr -c log_statement=all -c log_connections=on -c log_disconnections=on

volumes:
  magro-db:
