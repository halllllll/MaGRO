// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
	"time"
)

const addUser = `-- name: AddUser :one
INSERT INTO users(
  id, account_id, name, kana, role, status
) VALUES($1, $2, $3, $4, $5, $6)
RETURNING id, account_id, name, kana, role, status, created_at, updated_at
`

type AddUserParams struct {
	ID        string  `db:"id" json:"id"`
	AccountID string  `db:"account_id" json:"account_id"`
	Name      string  `db:"name" json:"name"`
	Kana      *string `db:"kana" json:"kana"`
	Role      int32   `db:"role" json:"role"`
	Status    int32   `db:"status" json:"status"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.db.QueryRow(ctx, addUser,
		arg.ID,
		arg.AccountID,
		arg.Name,
		arg.Kana,
		arg.Role,
		arg.Status,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.Kana,
		&i.Role,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUUID = `-- name: GetUserByUUID :one
SELECT users.id, users.account_id, users.name, users.kana, role.name AS "role", status.name AS "status", users.created_at, users.updated_at
FROM users
JOIN role ON role.id = users.role
JOIN status ON role.id = status.id
WHERE users.id = $1
`

type GetUserByUUIDRow struct {
	ID        string    `db:"id" json:"id"`
	AccountID string    `db:"account_id" json:"account_id"`
	Name      string    `db:"name" json:"name"`
	Kana      *string   `db:"kana" json:"kana"`
	Role      string    `db:"role" json:"role"`
	Status    string    `db:"status" json:"status"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetUserByUUID(ctx context.Context, id string) (GetUserByUUIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByUUID, id)
	var i GetUserByUUIDRow
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.Kana,
		&i.Role,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserRole = `-- name: GetUserRole :one
SELECT u.account_id, u.name, r.name AS "role"
FROM users AS u JOIN role AS r ON u.role = r.id WHERE u.id = $1
`

type GetUserRoleRow struct {
	AccountID string `db:"account_id" json:"account_id"`
	Name      string `db:"name" json:"name"`
	Role      string `db:"role" json:"role"`
}

func (q *Queries) GetUserRole(ctx context.Context, id string) (GetUserRoleRow, error) {
	row := q.db.QueryRow(ctx, getUserRole, id)
	var i GetUserRoleRow
	err := row.Scan(&i.AccountID, &i.Name, &i.Role)
	return i, err
}

const listUsersByRole = `-- name: ListUsersByRole :many
SELECT u.id, account_id, u.name, kana, role, status, created_at, updated_at, r.id, r.name, name_alias FROM users AS u
INNER JOIN role AS r ON r.id = u.role
WHERE r.name = $1
`

type ListUsersByRoleRow struct {
	ID        string    `db:"id" json:"id"`
	AccountID string    `db:"account_id" json:"account_id"`
	Name      string    `db:"name" json:"name"`
	Kana      *string   `db:"kana" json:"kana"`
	Role      int32     `db:"role" json:"role"`
	Status    int32     `db:"status" json:"status"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
	ID_2      int32     `db:"id_2" json:"id_2"`
	Name_2    string    `db:"name_2" json:"name_2"`
	NameAlias *string   `db:"name_alias" json:"name_alias"`
}

func (q *Queries) ListUsersByRole(ctx context.Context, name string) ([]ListUsersByRoleRow, error) {
	rows, err := q.db.Query(ctx, listUsersByRole, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersByRoleRow{}
	for rows.Next() {
		var i ListUsersByRoleRow
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Name,
			&i.Kana,
			&i.Role,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Name_2,
			&i.NameAlias,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByStatus = `-- name: ListUsersByStatus :many
SELECT u.id, account_id, u.name, kana, role, status, created_at, updated_at, s.id, s.name FROM users AS u
INNER JOIN status AS s ON s.id = u.status
WHERE s.name = $1
`

type ListUsersByStatusRow struct {
	ID        string    `db:"id" json:"id"`
	AccountID string    `db:"account_id" json:"account_id"`
	Name      string    `db:"name" json:"name"`
	Kana      *string   `db:"kana" json:"kana"`
	Role      int32     `db:"role" json:"role"`
	Status    int32     `db:"status" json:"status"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
	ID_2      int32     `db:"id_2" json:"id_2"`
	Name_2    string    `db:"name_2" json:"name_2"`
}

func (q *Queries) ListUsersByStatus(ctx context.Context, name string) ([]ListUsersByStatusRow, error) {
	rows, err := q.db.Query(ctx, listUsersByStatus, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersByStatusRow{}
	for rows.Next() {
		var i ListUsersByStatusRow
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Name,
			&i.Kana,
			&i.Role,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Name_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const reverseLookupUUID = `-- name: ReverseLookupUUID :one
SELECT users.id
FROM users
WHERE users.account_id = $1
`

// uuidから引く前提なので
func (q *Queries) ReverseLookupUUID(ctx context.Context, accountID string) (string, error) {
	row := q.db.QueryRow(ctx, reverseLookupUUID, accountID)
	var id string
	err := row.Scan(&id)
	return id, err
}

const searchUserByAccountID = `-- name: SearchUserByAccountID :many
SELECT id, account_id, name, kana, role, status, created_at, updated_at FROM users AS u
WHERE LOWER(u.account_id) LIKE '%' || $1 || '%'
ORDER BY u.account_id DESC
`

func (q *Queries) SearchUserByAccountID(ctx context.Context, dollar_1 *string) ([]User, error) {
	rows, err := q.db.Query(ctx, searchUserByAccountID, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Name,
			&i.Kana,
			&i.Role,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET (
  account_id, name, kana, role, status
) = ($1, $2, $3, $4, $5)
RETURNING id, account_id, name, kana, role, status, created_at, updated_at
`

type UpdateUserParams struct {
	AccountID string  `db:"account_id" json:"account_id"`
	Name      string  `db:"name" json:"name"`
	Kana      *string `db:"kana" json:"kana"`
	Role      int32   `db:"role" json:"role"`
	Status    int32   `db:"status" json:"status"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.AccountID,
		arg.Name,
		arg.Kana,
		arg.Role,
		arg.Status,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.Kana,
		&i.Role,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
