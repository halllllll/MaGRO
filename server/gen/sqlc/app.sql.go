// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: app.sql

package db

import (
	"context"
)

const createAppInfo = `-- name: CreateAppInfo :one
INSERT INTO app(
  title, client_id, unit_alias, subunit_alias
)VALUES($1, $2, $3, $4)
RETURNING id, title, client_id, unit_alias, subunit_alias
`

type CreateAppInfoParams struct {
	Title        string `db:"title" json:"title"`
	ClientID     string `db:"client_id" json:"client_id"`
	UnitAlias    string `db:"unit_alias" json:"unit_alias"`
	SubunitAlias string `db:"subunit_alias" json:"subunit_alias"`
}

func (q *Queries) CreateAppInfo(ctx context.Context, arg CreateAppInfoParams) (App, error) {
	row := q.db.QueryRow(ctx, createAppInfo,
		arg.Title,
		arg.ClientID,
		arg.UnitAlias,
		arg.SubunitAlias,
	)
	var i App
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ClientID,
		&i.UnitAlias,
		&i.SubunitAlias,
	)
	return i, err
}

const updateApp = `-- name: UpdateApp :one
UPDATE app
SET (
  title, client_id, unit_alias, subunit_alias
) = ($1, $2, $3, $4)
WHERE id = 1 -- 常に一行目に期待されるデータが格納されているとする
RETURNING id, title, client_id, unit_alias, subunit_alias
`

type UpdateAppParams struct {
	Title        string `db:"title" json:"title"`
	ClientID     string `db:"client_id" json:"client_id"`
	UnitAlias    string `db:"unit_alias" json:"unit_alias"`
	SubunitAlias string `db:"subunit_alias" json:"subunit_alias"`
}

func (q *Queries) UpdateApp(ctx context.Context, arg UpdateAppParams) (App, error) {
	row := q.db.QueryRow(ctx, updateApp,
		arg.Title,
		arg.ClientID,
		arg.UnitAlias,
		arg.SubunitAlias,
	)
	var i App
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ClientID,
		&i.UnitAlias,
		&i.SubunitAlias,
	)
	return i, err
}
