// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tasks.sql

package db

import (
	"context"
)

const addTask = `-- name: AddTask :one
INSERT INTO tasks (title, status) VALUES ($1, $2) RETURNING id, title, status, created, modified
`

type AddTaskParams struct {
	Title  string `db:"title" json:"title"`
	Status string `db:"status" json:"status"`
}

func (q *Queries) AddTask(ctx context.Context, arg AddTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, addTask, arg.Title, arg.Status)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.Created,
		&i.Modified,
	)
	return i, err
}

const allTask = `-- name: AllTask :many
SELECT id, title, status, created, modified FROM tasks
`

func (q *Queries) AllTask(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, allTask)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Status,
			&i.Created,
			&i.Modified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
