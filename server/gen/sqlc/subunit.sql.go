// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: subunit.sql

package db

import (
	"context"
)

const addSubunit = `-- name: AddSubunit :one
INSERT INTO subunit(
  unit_id, name, public
) VALUES(
  $1, $2, $3
) RETURNING id, unit_id, name, public, created_at, updated_at
`

type AddSubunitParams struct {
	UnitID int32  `db:"unit_id" json:"unit_id"`
	Name   string `db:"name" json:"name"`
	Public bool   `db:"public" json:"public"`
}

func (q *Queries) AddSubunit(ctx context.Context, arg AddSubunitParams) (Subunit, error) {
	row := q.db.QueryRow(ctx, addSubunit, arg.UnitID, arg.Name, arg.Public)
	var i Subunit
	err := row.Scan(
		&i.ID,
		&i.UnitID,
		&i.Name,
		&i.Public,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const searchSubunitsByUnitId = `-- name: SearchSubunitsByUnitId :many
SELECT id, unit_id, name, public, created_at, updated_at FROM subunit AS s
WHERE unit_id = $1
ORDER BY s.name DESC
`

func (q *Queries) SearchSubunitsByUnitId(ctx context.Context, unitID int32) ([]Subunit, error) {
	rows, err := q.db.Query(ctx, searchSubunitsByUnitId, unitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subunit{}
	for rows.Next() {
		var i Subunit
		if err := rows.Scan(
			&i.ID,
			&i.UnitID,
			&i.Name,
			&i.Public,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
