// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users_status.sql

package db

import (
	"context"
)

const createStatusName = `-- name: CreateStatusName :one
INSERT INTO users_status(name) VALUES($1) RETURNING id, name
`

func (q *Queries) CreateStatusName(ctx context.Context, name string) (UsersStatus, error) {
	row := q.db.QueryRow(ctx, createStatusName, name)
	var i UsersStatus
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getStatusName = `-- name: GetStatusName :one
SELECT id, name FROM users_status
WHERE id = $1
`

func (q *Queries) GetStatusName(ctx context.Context, id int32) (UsersStatus, error) {
	row := q.db.QueryRow(ctx, getStatusName, id)
	var i UsersStatus
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateStatusName = `-- name: UpdateStatusName :one
UPDATE users_status
SET name = $1
WHERE id = $2
RETURNING id, name
`

type UpdateStatusNameParams struct {
	Name string `db:"name" json:"name"`
	ID   int32  `db:"id" json:"id"`
}

func (q *Queries) UpdateStatusName(ctx context.Context, arg UpdateStatusNameParams) (UsersStatus, error) {
	row := q.db.QueryRow(ctx, updateStatusName, arg.Name, arg.ID)
	var i UsersStatus
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
