// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: role.sql

package db

import (
	"context"
)

const addRole = `-- name: AddRole :one
INSERT INTO role(name) VALUES($1)
RETURNING id, name, name_alias
`

func (q *Queries) AddRole(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRow(ctx, addRole, name)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.NameAlias)
	return i, err
}

const getRole = `-- name: GetRole :one
SELECT id, name, name_alias FROM role
WHERE id = $1
`

func (q *Queries) GetRole(ctx context.Context, id int32) (Role, error) {
	row := q.db.QueryRow(ctx, getRole, id)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.NameAlias)
	return i, err
}

const updateRoleName = `-- name: UpdateRoleName :one
UPDATE role
SET name_alias = COALESCE($1, name_alias)
WHERE name = $2
RETURNING id, name, name_alias
`

type UpdateRoleNameParams struct {
	NameAlias *string `db:"name_alias" json:"name_alias"`
	Name      string  `db:"name" json:"name"`
}

func (q *Queries) UpdateRoleName(ctx context.Context, arg UpdateRoleNameParams) (Role, error) {
	row := q.db.QueryRow(ctx, updateRoleName, arg.NameAlias, arg.Name)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.NameAlias)
	return i, err
}
